# SwitchML Configuration file
# This is where you can configure all SwitchML options.
# SwitchML looks for and parses this configuration file as soon as
# you start the context (unless you pass a Config object to its Start function).
# It looks for it in the following order:
#   1- /etc/switchml.config
#   2- ./switchml.config
#   3- ./switchml-<hostname>.config  (Ex. ./switchml-node12.config)

# General options.
[general]

# A unique identifier for a worker node. Like MPI ranks.
# Create a different configuration file for each worker node with this rank changed.
rank = 0

# The number of worker nodes in the system
num_workers = 1

# The number of worker threads to launch for each node.
# Each thread will typically be bound to a seperate core that is on the same numa
# node as the NIC.
num_worker_threads = 4

# The maximum number of pending packets for this **worker** (Not worker thread).
#
# This number is divided between worker threads.
# This means that each worker thread will first send its initial
# burst up to this number divided by num_worker_threads. Then sends new packets only after packets are received
# doing this until all packets have been sent.
# If you have this set to 256 and num_worker_threads set to 8 then each worker thread will send up to 32 packets.
max_outstanding_packets = 256

# The number of elements in a packet
packet_numel = 256

# Which backend should the SwitchML client use?.
# Choose from ['dummy', 'dpdk', 'rdma'].
# You can read about each backend through its class documentation.
# Make sure that the backend you choose has been compiled.
backend = dummy

# Which scheduler should we use to dispatch jobs to worker threads?.
# Choose from ['fifo'].
# You can read about each scheduler through its class documentation.
scheduler = fifo

# Which prepostprocessor should we use to load and unload the data into and from the network.
# Choose from ['bypass', 'cpu_exponent_quantizer']
prepostprocessor = cpu_exponent_quantizer

# If set to true then all jobs will be instantly completed regardless of the job type.
# This is used for debugging to disable all backend communication.
# The backend is still used to setup and cleanup.
instant_job_completion = false

# Backend options are appended after this point.
